diff --git a/cmake/common.cmake b/cmake/common.cmake
index 793a4a6..15969fa 100644
--- a/cmake/common.cmake
+++ b/cmake/common.cmake
@@ -57,7 +57,7 @@ endif(NOT CMAKE_BUILD_TYPE)
 message(STATUS "${Blue}Build type: ${CMAKE_BUILD_TYPE}${ColourReset}")
 
 if (CMAKE_BUILD_TYPE MATCHES Debug)
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -ggdb")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -ggdb -fno-omit-frame-pointer")
 message(STATUS "CXX Flags: ${CMAKE_CXX_FLAGS}")
 endif()
 
diff --git a/emp-tool/io/net_io_channel.h b/emp-tool/io/net_io_channel.h
index d4cf689..60f221f 100644
--- a/emp-tool/io/net_io_channel.h
+++ b/emp-tool/io/net_io_channel.h
@@ -28,6 +28,21 @@ class NetIO: public IOChannel<NetIO> { public:
 	bool has_sent = false;
 	string addr;
 	int port;
+
+    // stats
+    int num_tx=0;
+    int num_rx=0;
+    int size_tx=0;
+    int size_rx=0;
+
+    int global_num_tx=0;
+    int global_num_rx=0;
+    int global_size_tx=0;
+    int global_size_rx=0;
+
+    int num_flush=0;
+    int global_num_flush=0;
+
 	NetIO(const char * address, int port, bool quiet = false) {
 		this->port = port & 0xFFFF;
 		is_server = (address == nullptr);
@@ -78,6 +93,7 @@ class NetIO: public IOChannel<NetIO> { public:
 		buffer = new char[NETWORK_BUFFER_SIZE];
 		memset(buffer, 0, NETWORK_BUFFER_SIZE);
 		setvbuf(stream, buffer, _IOFBF, NETWORK_BUFFER_SIZE);
+        printf("YO socket buffer location: %p\n", buffer);
 		if(!quiet)
 			std::cout << "connected\n";
 	}
@@ -111,13 +127,20 @@ class NetIO: public IOChannel<NetIO> { public:
 	}
 
 	void flush() {
+        num_flush++;
+        global_num_flush++;
 		fflush(stream);
 	}
 
 	void send_data_internal(const void * data, int len) {
+		num_tx ++;
+		global_num_tx ++;
+		size_tx += len;
+		global_size_tx += len;
 		int sent = 0;
 		while(sent < len) {
 			int res = fwrite(sent + (char*)data, 1, len - sent, stream);
+			//int res = write(consocket, sent + (char*)data, len - sent); // raw writes are slower
 			if (res >= 0)
 				sent+=res;
 			else
@@ -127,12 +150,17 @@ class NetIO: public IOChannel<NetIO> { public:
 	}
 
 	void recv_data_internal(void  * data, int len) {
-		if(has_sent)
-			fflush(stream);
+		num_rx ++;
+		global_num_rx ++;
+		size_rx += len;
+		global_size_rx += len;
+        // This flush slows down agmpc setup phase
+		//if(has_sent) fflush(stream);
 		has_sent = false;
 		int sent = 0;
 		while(sent < len) {
 			int res = fread(sent + (char*)data, 1, len - sent, stream);
+			//int res = read(consocket, sent + (char*)data, len - sent); // raw writes are slower
 			if (res >= 0)
 				sent += res;
 			else 
@@ -143,4 +171,4 @@ class NetIO: public IOChannel<NetIO> { public:
 
 }
 
-#endif  //NETWORK_IO_CHANNEL
\ No newline at end of file
+#endif  //NETWORK_IO_CHANNEL
diff --git a/emp-tool/utils/ThreadPool.h b/emp-tool/utils/ThreadPool.h
index 19c7bc1..2ea5bea 100644
--- a/emp-tool/utils/ThreadPool.h
+++ b/emp-tool/utils/ThreadPool.h
@@ -62,7 +62,7 @@ int inline ThreadPool::size() const {
 inline ThreadPool::ThreadPool(size_t threads)
     :   stop(false)
 {
-    for(size_t i = 0;i<threads;++i)
+    for(size_t i = 0;i<threads;++i) {
         workers.emplace_back(
             [this]
             {
@@ -84,6 +84,13 @@ inline ThreadPool::ThreadPool(size_t threads)
                 }
             }
         );
+        //cpu_set_t cpuset;
+        //CPU_ZERO(&cpuset);
+        //CPU_SET(i, &cpuset);
+        //int rc = pthread_setaffinity_np(workers.back().native_handle(), sizeof(cpu_set_t), &cpuset);
+        //if (rc)
+        //    throw std::runtime_error("could not pin thread to cpu");
+    }
 }
 
 // add new work item to the pool
